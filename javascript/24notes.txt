Sync in JS
        Synchronous
        Synchronous means the code runs in a particular sequence of instructions given in the program.
        Each instruction waits for the previous instruction to complete its execution.
Asynchronous
    Due to synchronous programming, sometimes imp instructions get
    blocked due to some previous instructions, which causes a delay in the UI.
    Asynchronous code execution allows to execute next instructions
    immediately and doesn't block the flow.

    just like in real life scenario promises has two condtions one fullfilled another broken thats why 
   
Promises
    Promise is for "eventual" completion of task. It is an object in JS.
    It is a solution to callback hell.
let promise = new Promise( (resolve, reject) => {.... })
                            Function with 2 handlers
*resolve & reject are callbacks provided by JS

promises are mostly retured by apis they return promise and we work on them

Promises
    A JavaScript Promise object can be:
• Pending : the result is undefined
• Resolved: the result is a value (fulfilled)
• Rejected: the result is an error object
*Promise has state (pending, fulfilled) & some
result (result for resolve & error for reject).
resolve( result)
reject( error)



Promises
.then() & .catch()
promise.then((res) => {...} )
promise.catch((err) => {...})



Async-Await
async function always returns a promise.
async function myFunc() {....}
callback
hell
await pauses the execution of its surrounding async function until the promise is settled.

ab jaise ki hme promise and callback krne k liy function ki jarurat nhi hoti but async wait k liy hoti hai to hme ek function create krna padta hai fir use call krna padta hai vo unnecessary call hota hai 
to iske liy IIFE aaya called as 
Immeediately Invoked Function  Expression
jinme hm naam nhi dete vo jab declar hote hai tabhi execute hojate hain bs ek he bar execute hote hain 
to ineh use krte hai 
(function(){})();
(function=()=>{})()
(async(){})();
